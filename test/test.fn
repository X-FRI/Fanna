#| The MIT License (MIT)
#| 
#| Copyright (c) 2022 Muqiu Han
#| 
#| Permission is hereby granted, free of charge, to any person obtaining a copy
#| of this software and associated documentation files (the "Software"), to deal
#| in the Software without restriction, including without limitation the rights
#| to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#| copies of the Software, and to permit persons to whom the Software is
#| furnished to do so, subject to the following conditions:
#| 
#| The above copyright notice and this permission notice shall be included in all
#| copies or substantial portions of the Software.
#| 
#| THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#| IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#| FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#| AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#| LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#| OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#| SOFTWARE.

#| (Module "test")
module test

#| (Import "std")
import std

Main := lambda args -> {
    Writeln("Test Hello...");
    Test_Hello();

    #| Writeln("Test Factorial...");
    #| Test_Factorial();
}

#| [AST.Module {                       
#|    module_token =
#|    { Lexer.Token.token_value = "test";
#|      token_type = Lexer.Token.Type.Identifier; token_pos = (25, 0) }};
#|   AST.Import {
#|     import_token =
#|     { Lexer.Token.token_value = "std";
#|       token_type = Lexer.Token.Type.Identifier; token_pos = (28, 0) }};
#|   AST.Define {
#|     define_identifier =
#|     AST.Identifier {
#|       identifier_token =
#|       { Lexer.Token.token_value = "Test_Hello";
#|         token_type = Lexer.Token.Type.Identifier; token_pos = (29, 11) }};
#|     define_value =
#|     (AST.Program
#|        [[AST.Lambda {
#|            lambda_token =
#|            { Lexer.Token.token_value = "lambda";
#|              token_type = Lexer.Token.Type.Lambda; token_pos = (29, 21) };
#|            lambda_args = [];
#|            lambda_body =
#|            (AST.Program
#|               [[(AST.Program
#|                    [[AST.Call {
#|                        call_identifier =
#|                        AST.Identifier {
#|                          identifier_token =
#|                          { Lexer.Token.token_value = "Hello";
#|                            token_type = Lexer.Token.Type.Identifier;
#|                            token_pos = (29, 32) }};
#|                        call_args = []}
#|                       ]
#|                      ])
#|                  ]
#|                 ])}
#|           ]
#|          ])}
#|   ]
Test_Hello := lambda -> { Hello() }

#| [AST.Module {                       
#|    module_token =
#|    { Lexer.Token.token_value = "test";
#|      token_type = Lexer.Token.Type.Identifier; token_pos = (25, 0) }};
#|   AST.Import {
#|     import_token =
#|     { Lexer.Token.token_value = "std";
#|       token_type = Lexer.Token.Type.Identifier; token_pos = (28, 0) }};
#|   AST.Define {
#|     define_identifier =
#|     AST.Identifier {
#|       identifier_token =
#|       { Lexer.Token.token_value = "Hello";
#|         token_type = Lexer.Token.Type.Identifier; token_pos = (33, 6) }};
#|     define_value =
#|     (AST.Program
#|        [[AST.Lambda {
#|            lambda_token =
#|            { Lexer.Token.token_value = "lambda";
#|              token_type = Lexer.Token.Type.Lambda; token_pos = (33, 16) };
#|            lambda_args = [];
#|            lambda_body =
#|            (AST.Program
#|               [[(AST.Program
#|                    [[AST.Call {
#|                        call_identifier =
#|                        AST.Identifier {
#|                          identifier_token =
#|                          { Lexer.Token.token_value = "Writeln";
#|                            token_type = Lexer.Token.Type.Identifier;
#|                            token_pos = (33, 29) }};
#|                        call_args =
#|                        [[AST.String {
#|                            string_token =
#|                            { Lexer.Token.token_value = "Hello World!";
#|                              token_type = Lexer.Token.Type.String;
#|                              token_pos = (33, 44) }}
#|                           ]
#|                          ]}
#|                       ]
#|                      ])
#|                  ]
#|                 ])}
#|           ]
#|          ])}
#|   ]
Hello := lambda -> { Writeln("Hello World!") }

#| Factorial := lambda n -> {
#|     | ||(=(n, 1), =(n, 0)) -> { return 1 }
#|     | _ -> { return *(n, Factorial(min(n, 1))) }
#| }
#| 
#| Test_Factorial := lambda -> {
#|     loop n := 0 until =(n 16) -> {
#|         Writeln(n, "! = ", Factorial(n));
#|         ++(n);
#|     }
#| }